// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Diagnostics;
using MacGallery.MainWindow;
using ObjCRuntime;
using MacGallery.Extensions;
using CoreFoundation;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace MacGallery
{
    public partial class OutlineViewController : NSViewController, INSOutlineViewDataSource, INSOutlineViewDelegate
    {
        private NSArray _contents = new NSArray();
        private NSOperationQueue OpQueue = new NSOperationQueue()
        {
            QualityOfService = NSQualityOfService.UserInteractive,
            MaxConcurrentOperationCount = 8,
        };

        [Export("contents")]
        public NSArray Contents
        {
            get => _contents;
        }

        [Export("setContents:")]
        internal void SetContents(NSArray array)
        {
            WillChangeValue("contents");
            _contents = array;
            DidChangeValue("contents");
        }

        InitialViewController? initialViewController;

        public NSViewController? ViewControllerForSelection(NSTreeNode[]? selection)
        {
            if (selection is null)
            {
                return initialViewController;
            }

            return selection.Length switch
            {
                0 => initialViewController,
                _ => initialViewController,
            };
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            SetupObservers();
            initialViewController = Storyboard!.InstantiateControllerWithIdentifier(nameof(InitialViewController)) as InitialViewController;
        }

        private void SetupObservers()
        {
            //NSNotificationCenter.DefaultCenter.AddObserver(
            //    this,
            //    new Selector("onFolderContents:"),
            //    WindowViewController.Notifications.OnFolderContents,
            //    null);
        }

        [Export("onFolderContents:")]
        private void OnFolderContents(NSNotification notification)
        {
            Debug.WriteLine(nameof(OnFolderContents));
            if (notification.Object is NSUrl workingDir)
            {
                OpQueue.AddOperation(() =>
                {
                    var contents = EnumerateAllFilesInDirectory(workingDir)
                        .Where(url => url.IsFolder() || url.IsImage())
                        .Select(FileNode.From)
                        .ToArray();
                    DispatchQueue.MainQueue.DispatchAsync(() =>
                    {
                        SetContents(NSArray.FromObjects(contents));
                    });
                });

                //for (var i = 0; i < contents.Length; i += 1)
                //{
                //    var node = contents[i];
                //    //OpQueue.AddOperation(() =>
                //    //{
                //    //    node.Icon = node.Url.GetIcon();
                //    //    BeginInvokeOnMainThread(() =>
                //    //    {
                //    //        outlineView.ReloadData(); // NSIndexSet.FromIndex(i), NSIndexSet.FromIndex(0));
                //    //        //WillChangeValue("contents");
                //    //        //Contents.Add(node);
                //    //        //DidChangeValue("contents");
                //    //    });

                //    //    //node.Icon = node.Url.GetIcon();
                //    //    //treeController.UsesLazyFetching
                //    //    //this.treeController.
                //    //});
                //}
                //outlineView.EndUpdates();
            }
        }

        private IEnumerable<NSUrl?> EnumerateAllFilesInDirectory(NSUrl? folderUrl)
        {
            if (folderUrl is null)
            {
                throw new ArgumentNullException(nameof(folderUrl));
            }

            if (!folderUrl.IsFolder())
            {
                throw new DirectoryNotFoundException(folderUrl.Path);
            }

            var fileManager = NSFileManager.DefaultManager;
            var files = fileManager.GetDirectoryContent(folderUrl,
                                                        NSArray.FromObjects(NSUrl.IsDirectoryKey, NSUrl.IsPackageKey, NSUrl.TypeIdentifierKey, NSUrl.LocalizedNameKey),
                                                        NSDirectoryEnumerationOptions.SkipsHiddenFiles,
                                                        out var error);
            if (error != null)
            {
                throw new NSErrorException(error);
            }

            return files;
        }

        [Export("outlineView:viewForTableColumn:item:")]
        public NSView? GetView(NSOutlineView outlineView, NSTableColumn tableColumn, NSObject item)
        {
            var node = FileNode.From(item);

            if (outlineView.MakeView("MainCell", this) is NSTableCellView view)
            {
                view.TextField.StringValue = node.Title;
                view.ImageView.Image = node.Icon;

                if (node.Icon == null)
                {
                    OpQueue.AddOperation(() =>
                    {
                        node.LoadIcon();
                        BeginInvokeOnMainThread(() => outlineView.ReloadItem(item));
                    });
                }
                return view;
            }

            return null;
        }

        public OutlineViewController(IntPtr handle) : base(handle) { }
    }
}
