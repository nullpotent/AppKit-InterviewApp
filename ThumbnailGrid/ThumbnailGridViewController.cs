// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using AppKit;
using CoreGraphics;
using Foundation;
using MacGallery.Extensions;
using MacGallery.MainWindow;
using MacGallery.ThumbnailGrid.Models;

namespace MacGallery.ThumbnailGrid
{
    public partial class ThumbnailGridViewController : NSViewController
    {
        public ThumbnailGridSource Source { get; } = new();

        private ThumbnailModel? _thumbnailSelected;

        [Export(nameof(ThumbnailSelected))]
        public ThumbnailModel? ThumbnailSelected
        {
            get => _thumbnailSelected;
            set
            {
                WillChangeValue(nameof(ThumbnailSelected));
                _thumbnailSelected = value;
                DidChangeValue(nameof(ThumbnailSelected));
                //RaiseSelectionChanged();
            }
        }

        public void SetWorkingDirectoryUrl(NSUrl? workingDirectoryUrl)
        {
            if (workingDirectoryUrl is null)
            {
                throw new ArgumentNullException(nameof(workingDirectoryUrl));
            }
            else if (!workingDirectoryUrl.IsFolder())
            {
                throw new DirectoryNotFoundException(workingDirectoryUrl.Path);
            }

            InvokeOnMainThread(() =>
            {
                WindowViewController.SendShowProgress();
                Source.Data.Clear();
                ThumbnailCollection?.ReloadData();
            });

            Task.Run(() =>
            {
                try
                {
                    var contents = GatherContents(workingDirectoryUrl);
                    Source.Data.AddRange(contents);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex);
                }
                finally
                {
                    InvokeOnMainThread(() =>
                    {
                        ThumbnailCollection.ReloadData();
                        WindowViewController.SendHideProgress();
                    });
                }
            });
        }

        [Export("CollectionItemViewDoubleClick:")]
#pragma warning disable IDE0051 // Remove unused private members
        private void CollectionItemViewDoubleClick(NSObject? sender)
#pragma warning restore IDE0051 // Remove unused private members
        {
            RaiseThumbnailDoubleClicked();
        }

        #region Override Methods
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ConfigureCollectionView();
        }
        #endregion

        #region Private Methods
        private void ConfigureCollectionView()
        {
            ThumbnailCollection.RegisterClassForItem(typeof(ThumbnailItemController), "ThumbnailCell");

            var flowLayout = new NSCollectionViewFlowLayout()
            {
                EstimatedItemSize = new CGSize(105, 60),
                SectionInset = new NSEdgeInsets(10, 10, 10, 10),
            };

            ThumbnailCollection.WantsLayer = true;
            ThumbnailCollection.CollectionViewLayout = flowLayout;
            ThumbnailCollection.Delegate = new ThumbnailGridDelegate(this);
            ThumbnailCollection.DataSource = Source;
        }

        private List<ThumbnailModel> GatherContents(NSUrl url)
        {
            var contentArray = new List<ThumbnailModel>();
            var files = NSFileManager.DefaultManager.GetDirectoryContent(url,
                                                        NSArray.FromObjects(NSUrl.IsDirectoryKey, NSUrl.IsPackageKey, NSUrl.TypeIdentifierKey, NSUrl.LocalizedNameKey),
                                                        NSDirectoryEnumerationOptions.SkipsHiddenFiles,
                                                        out var error);
            if (error != null)
            {
                Debug.WriteLine(error);
                throw new NSErrorException(error);
            }

            foreach (var element in files)
            {
                var elementNameStr = element.GetLocalizedName();
                var elementIcon = element.GetIcon();

                contentArray.Add(new ThumbnailModel(elementNameStr, elementIcon));
            }

            return contentArray;
        }
        #endregion

        #region Events
        public delegate void OnThumbnailDoubleClick();

        public event OnThumbnailDoubleClick? ThumbnailDoubleClicked;

        internal void RaiseThumbnailDoubleClicked()
        {
            ThumbnailDoubleClicked?.Invoke();
        }
        #endregion

        #region Constructors
        public ThumbnailGridViewController(IntPtr handle) : base(handle) { }
        #endregion
    }
}
