// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Diagnostics;
using MacGallery.Extensions;
using MacGallery.MainWindow;
using System.Linq;
using MacGallery.ThumbnailGrid.Models;
using CoreGraphics;

namespace MacGallery.ThumbnailGrid
{
    public partial class ThumbnailGridViewController : NSViewController
    {
        private ThumbnailModel _thumbnailSelected;

        public ThumbnailGridSource Datasource { get; set; }

        [Export("ThumbnailSelected")]
        public ThumbnailModel ThumbnailSelected
        {
            get { return _thumbnailSelected; }
            set
            {
                WillChangeValue("ThumbnailSelected");
                _thumbnailSelected = value;
                DidChangeValue("ThumbnailSelected");
                RaiseSelectionChanged();
            }
        }

        public void SetWorkingDirectoryUrl(NSUrl? workingDirectoryUrl)
        {
            if (workingDirectoryUrl is null)
            {
                throw new ArgumentNullException(nameof(workingDirectoryUrl));
            }

            Task.Run(() =>
            {
                try
                {
                    WindowViewController.SendShowProgress();
                    var contents = GatherContents(workingDirectoryUrl);
                    Datasource.Data.AddRange(contents);
                    InvokeOnMainThread(() =>
                    {
                        ThumbnailCollection.ReloadData();
                    });
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex);
                }
                finally
                {
                    WindowViewController.SendHideProgress();
                }
            });
        }

        private List<ThumbnailModel> GatherContents(NSUrl url)
        {
            var contentArray = new List<ThumbnailModel>();
            var files = NSFileManager.DefaultManager.GetDirectoryContent(url,
                                                        NSArray.FromObjects(NSUrl.IsDirectoryKey, NSUrl.IsPackageKey, NSUrl.TypeIdentifierKey, NSUrl.LocalizedNameKey),
                                                        NSDirectoryEnumerationOptions.SkipsHiddenFiles,
                                                        out var error);
            if (error != null)
            {
                Debug.WriteLine(error);
                throw new NSErrorException(error);
            }

            foreach (var element in files)
            {
                var elementNameStr = element.GetLocalizedName();
                var elementIcon = element.GetIcon();

                contentArray.Add(new ThumbnailModel(elementNameStr, elementIcon));
            }

            return contentArray;
        }

        #region Override Methods
        /// <summary>
        /// Called after the view has finished loading from the Storyboard to allow it to
        /// be configured before displaying to the user.
        /// </summary>
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Initialize Collection View
            ConfigureCollectionView();
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Configures the collection view.
        /// </summary>
        private void ConfigureCollectionView()
        {
            ThumbnailCollection.RegisterClassForItem(typeof(ThumbnailItemController), "ThumbnailCell");

            // Create a flow layout
            var flowLayout = new NSCollectionViewFlowLayout()
            {
                ItemSize = new CGSize(64, 64),
                SectionInset = new NSEdgeInsets(10, 10, 10, 20),
                MinimumInteritemSpacing = 8,
                MinimumLineSpacing = 4
            };
            ThumbnailCollection.WantsLayer = true;

            // Setup collection view
            ThumbnailCollection.CollectionViewLayout = flowLayout;
            ThumbnailCollection.Delegate = new ThumbnailGridDelegate(this);
        }

        /// <summary>
        /// Populates the Datasource with data and attaches it to the collection view.
        /// </summary>
        private void PopulateWithData()
        {
            // Make datasource
            Datasource = new ThumbnailGridSource(ThumbnailCollection);

            // Build list of employees
            Datasource.Data.Add(new ThumbnailModel("Craig Dunn", NSImage.ImageNamed(NSImageName.Folder)));
            Datasource.Data.Add(new ThumbnailModel("Amy Burns", NSImage.ImageNamed(NSImageName.Folder)));
            Datasource.Data.Add(new ThumbnailModel("Joel Martinez", NSImage.ImageNamed(NSImageName.Folder)));
            Datasource.Data.Add(new ThumbnailModel("Kevin Mullins", NSImage.ImageNamed(NSImageName.Folder)));
            Datasource.Data.Add(new ThumbnailModel("Mark McLemore", NSImage.ImageNamed(NSImageName.Folder)));
            Datasource.Data.Add(new ThumbnailModel("Tom Opgenorth", NSImage.ImageNamed(NSImageName.Folder)));
            Datasource.Data.Add(new ThumbnailModel("Larry O'Brien", NSImage.ImageNamed(NSImageName.Folder)));
            Datasource.Data.Add(new ThumbnailModel("Mike Norman", NSImage.ImageNamed(NSImageName.Folder)));

            // Populate collection view
            ThumbnailCollection.ReloadData();
        }
        #endregion

        #region Events
        public delegate void SelectionChangedDelegate();

        public event SelectionChangedDelegate SelectionChanged;

        internal void RaiseSelectionChanged()
        {
            SelectionChanged?.Invoke();
        }
        #endregion

        #region Constructors
        public ThumbnailGridViewController(IntPtr handle) : base(handle) { }
        #endregion
    }
}
